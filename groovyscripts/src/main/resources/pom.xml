<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>${packageName}</groupId>
  <artifactId>${projectName}</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>apk</packaging>

  <dependencies>
    <dependency>
      <groupId>com.google.android</groupId>
      <artifactId>android</artifactId>
      <version>4.1.1.4</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.actionbarsherlock</groupId>
      <artifactId>actionbarsherlock</artifactId>
      <version>4.3.0</version>
      <type>apklib</type>
    </dependency>

    <dependency>
      <groupId>com.viewpagerindicator</groupId>
      <artifactId>library</artifactId>
      <version>2.4.1</version>
      <type>apklib</type>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>
    <sourceDirectory>src</sourceDirectory>
    <plugins>

      <!--  read sdk.dir property from local.properties -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0-alpha-2</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>${basedir}/local.properties</file>
                <file>${basedir}/project.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>

      <!-- maven-android-plugin doesn't delete files from bin, only from
        target, we are deleting them here -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.4.1</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>bin</directory>
              <includes>
                <include>**/*</include>
              </includes>
            </fileset>
            <fileset>
              <directory>gen</directory>
              <includes>
                <include>**/*</include>
              </includes>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <plugin>
        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
        <artifactId>android-maven-plugin</artifactId>
        <version>3.8.2</version>
        <extensions>true</extensions>
        <configuration>
          <genDirectory>${basedir}/gen</genDirectory>
          <genDirectoryAidl>${basedir}/gen</genDirectoryAidl>
          <deleteConflictingFiles>true</deleteConflictingFiles>
          <undeployBeforeDeploy>true</undeployBeforeDeploy>
          <run>
            <debug>true</debug>
          </run>
          <sdk>
            <path>${sdk.dir}</path>
            <platform>${androidAPINumber}</platform>
          </sdk>
          <emulator>
            <avd>device1</avd>
          </emulator>
        </configuration>
      </plugin>

      <!-- mvn eclipse:eclipse groovy:execute -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.9</version>
        <configuration>
          <excludes>
            <!--  because of com.android.ide.eclipse.adt.ANDROID_FRAMEWORK and  com.android.ide.eclipse.adt.LIBRARIES -->
            <exclude>com.google.android:android</exclude>
            <exclude>commons-logging:commons-logging</exclude>
            <exclude>org.apache.httpcomponents:httpclient</exclude>
            <exclude>org.apache.httpcomponents:httpcore</exclude>
            <exclude>commons-codec:commons-codec</exclude>
            <exclude>org.khronos:opengl-api</exclude>
            <exclude>xerces:xmlParserAPIs</exclude>
            <exclude>xpp3:xpp3</exclude>
            <exclude>org.json:json</exclude>
            <!-- because com.actionbarsherlock has this jar -->
            <exclude>com.google.android:support-v4</exclude>
          </excludes>
          <downloadSources>true</downloadSources>
          <additionalProjectnatures>
            <projectnature>com.android.ide.eclipse.adt.AndroidNature</projectnature>
          </additionalProjectnatures>
          <buildcommands>
            <buildcommand>com.android.ide.eclipse.adt.ResourceManagerBuilder</buildcommand>
            <buildcommand>com.android.ide.eclipse.adt.PreCompilerBuilder</buildcommand>
            <buildcommand>org.eclipse.jdt.core.javabuilder</buildcommand>
            <buildcommand>com.android.ide.eclipse.adt.ApkBuilder</buildcommand>
          </buildcommands>
          <classpathContainers>
            <classpathContainer>com.android.ide.eclipse.adt.ANDROID_FRAMEWORK</classpathContainer>
            <classpathContainer>com.android.ide.eclipse.adt.LIBRARIES</classpathContainer>
          </classpathContainers>
        </configuration>
      </plugin>
      <!-- mvn eclipse:eclipse groovy:execute -->
      <plugin>
        <groupId>org.codehaus.gmaven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <version>1.4</version>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.gmaven.runtime</groupId>
            <artifactId>gmaven-runtime-1.8</artifactId>
            <version>1.4</version>
          </dependency>
        </dependencies>
        <configuration>
          <providerSelection>1.8</providerSelection>
          <source><![CDATA[

          File basedir = this.project.basedir
          File targetDir = new File(this.project.build.directory)
          def props = new Properties()
          new File(basedir, 'local.properties').withInputStream {
            stream -> props.load(stream)
          }
          File sdkDir = new File(props['sdk.dir'])
          new File(basedir, 'project.properties').withInputStream {
            stream -> props.load(stream)
          }
          String targetID = props['target']

          String androidCmd = 'cmd.exe /c android.bat'
          if (!System.properties['os.name'].toLowerCase().contains('windows')) {
            androidCmd = '/bin/sh -c android'
          }

          int libRefNum = 1
          File apklibs = new File(targetDir, 'unpack/apklibs')
          if (apklibs.exists()) {
            apklibs.eachDir{ dir ->
                  def apklibDir = new File(basedir.parentFile, dir.name)
                  // copy expanded apklib to a new folder
                  ant.copy(todir: apklibDir) {
                     fileset(dir: new File(apklibs, dir.name))
                  }
                  // add some Ant files
                  String cmd = androidCmd + ' update lib-project --target "' + targetID + '" --path "' + apklibDir.absolutePath + '"'
                  ant.echo(message: 'Executing ' + cmd)
                  Process p = cmd.execute(null, new File(sdkDir, "tools"))
                  def out = new StringBuilder()
                  def err = new StringBuilder()
                  p.waitForProcessOutput(out, err)
                  ant.echo(message: err.toString())
                  ant.echo(message: out.toString())
                  def projectFile = new File(apklibDir, "project.properties")
                  if (projectFile.text.indexOf('android.library') == -1) {
                    if (!projectFile.text.endsWith('\n')) projectFile.append('\r\n')
                    projectFile.append('android.library=true')
                  }
                  // add .project and .classpath files
                  new File(apklibDir, ".project").text = """<?xml version="1.0" encoding="UTF-8"?>
                    <projectDescription>
                      <name>${dir.name}</name>
                      <projects/>
                      <buildSpec>
                        <buildCommand>
                          <name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
                        </buildCommand>
                        <buildCommand>
                          <name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
                        </buildCommand>
                        <buildCommand>
                          <name>org.eclipse.jdt.core.javabuilder</name>
                        </buildCommand>
                        <buildCommand>
                          <name>com.android.ide.eclipse.adt.ApkBuilder</name>
                        </buildCommand>
                      </buildSpec>
                      <natures>
                        <nature>org.eclipse.jdt.core.javanature</nature>
                        <nature>com.android.ide.eclipse.adt.AndroidNature</nature>
                      </natures>
                    </projectDescription>
                    """

                  new File(apklibDir, ".classpath").text = """<?xml version="1.0" encoding="UTF-8"?>
                    <classpath>
                        <classpathentry kind="src" path="src"/>
                        <classpathentry kind="src" path="gen"/>
                        <classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
                        <classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
                        <classpathentry kind="output" path="bin/classes"/>
                    </classpath>
                  """
                  // add reference from main project
                  new File(basedir, 'project.properties').append("android.library.reference.${libRefNum}=../${dir.name}")
                  libRefNum ++
            }
            // removed invalid references from .classpath of main project
            StringWriter writer = new StringWriter()
            new File(basedir, '.classpath').filterLine(writer) { line ->
              !line.contains('unpack/apklibs') && !line.contains('JRE_CONTAINER')
            }
            new File(basedir, '.classpath').text = writer.toString()

          }

          ]]></source>
        </configuration>
      </plugin>

    </plugins>
  </build>
</project>
